import {createReducer} from "@reduxjs/toolkit";

const userinitialstate={
    user:{}
};

export const userreducer=createReducer(userinitialstate,{
    REGISTER_USER_REQUEST:(state,action)=>{
        return{
            loading:true,
            user:{},
            isAuthenticated:false,
        }
    },
    REGISTER_USER_SUCCESS:(state,action)=>{
        return{
            loading:false,
            user:action.payload.user,
            isAuthenticated:true,
        }
    },
    REGISTER_USER_FAIL:(state,action)=>{
        return{
            loading:false,
            user:null,
            error:action.payload,
            isAuthenticated:false,
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null,
        }
    },
    default:(state,action)=>{
        return{
            state,
        }
    },
    LOGIN_USER_REQUEST:(state,action)=>{
        return{
            loading:true,
            user:{},
            isAuthenticated:false,
        }
    },
    LOGIN_USER_SUCCESS:(state,action)=>{
        return{
            loading:false,
            user:action.payload.user,
            isAuthenticated:true,
        }
    },
    LOGIN_USER_FAIL:(state,action)=>{
        return{
            loading:false,
            user:{},
            isAuthenticated:false,
            error:action.payload,
        }
    },
    LOAD_USER_REQUEST:(state,action)=>{
        return{
            loading:true,
            isAuthenticated:false,
            user:{}
        }
    },
    LOAD_USER_SUCCESS:(state,action)=>{
        return{
            loading:false,
            user:action.payload.user,
            isAuthenticated:true,
        }
    },
    LOAD_USER_FAIL:(state,action)=>{
        return{
            loading:false,
            user:{},
            isAuthenticated:false,
            error:action.payload,
        }
    },
    LOGOUT_USER_REQUEST:(state,action)=>{
        return{
            loading:true,
            logout:false,

        }
    },
    LOGOUT_USER_SUCCESS:(state,action)=>{
        return{
            loading:false,
            logout:action.payload.success,
            user:null,
            isAuthenticated:false,
        }
    },
    LOGOUT_USER_FAIL:(state,action)=>{
        return{
            loading:false,
            error:action.payload,
            ...state,
        }
    }
});

const updateprofileinitialstate={
    updateprofile:{}
};
export const updateprofilereducer=createReducer(updateprofileinitialstate,{
    UPDATE_PROFILE_REQUEST:(state,action)=>{
        return{
            ...state,
            loading:true,
            isUpdated:false,
        }
    },
    UPDATE_PROFILE_SUCCESS:(state,action)=>{
        return{
            loading:false,
            ...state,
            isUpdated:action.payload.success,

        }
    },
    UPDATE_PROFILE_FAIL:(state,action)=>{
        return{
            loading:false,
            isUpdated:false,
            error:action.payload,
        }
    },
    UPDATE_PROFILE_RESET:(state,action)=>{
        return{
            loading:false,
            isUpdated:false,
            
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null,
        }
    },
    default:(state,action)=>{
        return{
            state,
        }
    },
    UPDATE_PASSWORD_REQUEST:(state,action)=>{
        return{
            loading:true,
            isUpdated:false,
            ...state,
        }
    },
    UPDATE_PASSWORD_SUCCESS:(state,action)=>{
        return{
            loading:false,
            isUpdated:action.payload.success,
            
        }
    },
    UPDATE_PASSWORD_FAIL:(state,action)=>{
        return{
            loading:false,
            isUpdated:false,
            error:action.payload,
            
        }
    },
    UPDATE_PASSWORD_RESET:(state,action)=>{
        return{
            loading:false,
            isUpdated:false,
        }
    }

});


let alluserinitialstate={
    alluser:[]
};
export const alladminuserreducer=createReducer(alluserinitialstate,{
    ADMIN_ALL_USER_REQUEST:(state,action)=>{
        return{
            ...state,
            loading:true,
        }
    },
    ADMIN_ALL_USER_SUCCESS:(state,action)=>{
        return{
            ...state,
            loading:false,
            alluser:action.payload.alluser,
        }
    },
    ADMIN_ALL_USER_FAIL:(state,action)=>{
        return{
            ...state,
            loading:false,
            error:action.payload,
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null,
        }
    },
    defaul:(state,action)=>{
        return{
            state,
        }
    }
});



let deleteuserinitialstate={
    deleteuser:{}
};
export const deleteuserreducer=createReducer(deleteuserinitialstate,{
    DELETE_USER_REQUEST:(state,action)=>{
        return{
            ...state,
            loading:true,
        }
    },
    DELETE_USER_SUCCESS:(state,action)=>{
        return{
            ...state,
            loading:false,
            isDeleted:action.payload.success,
            message:action.payload.message,
        }
    },
    DELETE_USER_FAIL:(state,action)=>{
        return{
            ...state,
            loading:false,
            error:action.payload,
        }
    },
    DELETE_USER_RESET:(state,action)=>{
        return{
            ...state,
            idDeleted:false,
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null,
        }
    },
    default:(state,action)=>{
        return{
            state,
        }
    }

});


let updateuserinitialstate={
    updateuser:{}
}
export const updateuserrolereducer=createReducer(updateuserinitialstate,{
    
    UPDATE_USER_ROLE_REQUEST:(state,action)=>{
            return{
                ...state,
                loading:true,
            }
        },
    
    UPDATE_USER_ROLE_SUCCESS:(state,action)=>{
        return{
            ...state,
            loading:false,
            isUpdated:action.payload.success,
        }
    },
    UPDATE_USER_ROLE_FAIL:(state,action)=>{
        return{
            ...state,
            loading:false,
            error:action.payload,
        }
    },
    UPDATE_USER_ROLE_RESET:(state,action)=>{
        return{
            ...state,
            isUpdated:false,
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null,
        }
    },
    default:(state,action)=>{
        return{
            state,
        }
    }
});


let userdetailinitialstate={
    userdetail:{}
};
export const userdetailreducer=createReducer(userdetailinitialstate,{
    USER_DETAIL_REQUEST:(state,action)=>{
        return{
            ...state,
            loading:true
        }
    },
    USER_DETAIL_SUCCESS:(state,action)=>{
        return{
            ...state,
            loading:false,
            userdetail:action.payload.user,
        }
    },
    USER_DETAIL_FAIL:(state,action)=>{
        return{
            ...state,
            loading:false,
            error:action.payload,
        }
    },
    CLEAR_ERROR:(state,action)=>{
        return{
            ...state,
            error:null
        }
    },
    default:(state,action)=>{
        return{
            state
        }
    }
});